name: Generate Avro & Commit (using docker run directly)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  generate-schema:
    runs-on: ubuntu-latest # <-- Job runs on the standard Ubuntu runner VM
    # REMOVE the 'container:' key and its image here.
    # We will invoke Docker directly in the steps.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Important: Checkout with write permissions to allow pushing changes
          # This uses the default GITHUB_TOKEN.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify working directory and Git (on host)
        run: |
          echo "Current working directory on runner (host):"
          pwd # This should output /__w/odcs-demo/odcs-demo
          echo "Contents of current directory:"
          ls -la
          echo "Git version on runner (host):"
          git --version # This should work fine

      - name: Create output directories
        run: |
          # This runs on the host runner's filesystem
          mkdir -p output/ecommerce/avro/

      - name: Export AVRO schema for ecommerce using Docker
        run: |
          echo "Pulling datacontract/cli:latest..."
          docker pull datacontract/cli:latest

          ls -la source/odcs/ecommerce

          # The current working directory on the host is the repository root ($PWD or $GITHUB_WORKSPACE)
          # We will mount this directory into the Docker container at /app (or any path you prefer).
          # Then, we'll run datacontract commands relative to /app inside the container.
          
          for f in source/odcs/ecommerce/*.yml; do
            if [ -f "$f" ]; then
              echo "Processing $f"
              filename=$(basename -- "$f")
              filename_no_ext="${filename%.*}"
          
              # Execute datacontract export inside the container
              # --rm: remove container after exit
              # -v "$PWD":/app: mounts the current host directory (your repo root) to /app inside the container
              # -w /app: sets /app as the working directory inside the container for this command
              # datacontract/cli:latest: the Docker image to use
              # The rest are the arguments to the datacontract CLI within the container
              docker run --rm \
                -v "$PWD":/app \
                -w /app \
                datacontract/cli:latest \
                export \
                --output "output/ecommerce/avro/${filename_no_ext}.avsc" \
                --format avro \
                "source/odcs/ecommerce/$filename"
            fi
          done

      - name: Configure Git
        # These commands run directly on the ubuntu-latest runner, which has Git installed.
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add and Commit changes
        id: commit_changes
        run: |
          git add output/ecommerce/avro/
          
          if ! git diff --cached --exit-code; then
            echo "Changes detected, committing..."
            git commit -m "chore: Generate Avro schemas for ecommerce data"
            echo "::set-output name=has_changes::true"
          else
            echo "No changes to commit."
            echo "::set-output name=has_changes::false"
          fi

      - name: Push changes
        if: steps.commit_changes.outputs.has_changes == 'true'
        run: |
          git push